/*************************************************************************
 * testgpio.c - A c program to test gpio pin state using sysfs from
 * userspace.
 *
 * (C) 2015 KB4OID Labs, A division of Kodetroll Heavy Industries
 * Author: Kodetroll
 * Date: January 2015
 *
 *************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>

#define HIGH 1
#define LOW 0
#define ON 1
#define OFF 0

//	/sys/class/leds/beaglebone\:green\:${LED}/trigger
char gpio[] = "/sys/class/gpio";
char sysfs[120];
char valset[20];

int VERBOSE = 0;

int write_sysfs_node(char * sysfs, char * value);
int gpio_export(int pin);
int gpio_unexport(int pin);
int gpio_write(int pin, int state);

int write_sysfs_node(char * sysfs, char * value)
{
    int fd;

    if (VERBOSE) {
        printf("sysfs: '%s'\n",sysfs);
        printf("value: '%s'\n",value);
    }

#ifdef USE_FNTL
    fd = open(sysfs, O_WRONLY);
    if (fd < 0) {
        printf("Error writing node '%s'\n",sysfs);
        return(-1);
    }
    write (fd, &value, strlen(value));
    close(fd);
#else
    FILE* f = fopen(sysfs, "w");
    if (f == NULL) {
        fprintf(stderr, "Unable to open path for writing\n");
        return(-1);
    }

    fprintf(f, value);
    fprintf(f, "\n");
    fclose(f);
#endif
    return(0);
}

int gpio_export(int pin)
{
    if (VERBOSE) {
        printf("pin: '%d'\n",pin);
    }

    sprintf(sysfs,"%s/export",gpio);
    sprintf(valset,"%d",pin);

    if (VERBOSE) {
        printf("sysfs: '%s'\n",sysfs);
        printf("valset: '%s'\n",valset);
    }

    if (write_sysfs_node(sysfs, valset) < 0) {
        printf("Error exporting pin '%d' to node '%s'\n",pin,gpio);
        return(-1);
    }

    return(0);
}

int gpio_unexport(int pin)
{
    if (VERBOSE) {
        printf("pin: '%d'\n",pin);
    }

    sprintf(sysfs,"%s/unexport",gpio);
    sprintf(valset,"%d",pin);

    if (VERBOSE) {
        printf("sysfs: '%s'\n",sysfs);
        printf("valset: '%s'\n",valset);
    }

    if (write_sysfs_node(sysfs, valset) < 0) {
        printf("Error unexporting pin '%d' to node '%s'\n",pin,gpio);
        return(-1);
    }

    return(0);
}

int gpio_write(int pin, int state)
{
    if (VERBOSE) {
        printf("pin: '%d'\n",pin);
        printf("state: '%d'\n",state);
    }

    sprintf(sysfs,"%s/gpio%d/value",gpio,pin);
    sprintf(valset,"%d",state);

    if (VERBOSE) {
        printf("sysfs: '%s'\n",sysfs);
        printf("valset: '%s'\n",valset);
    }

    if (write_sysfs_node(sysfs, valset) < 0) {
        printf("Error writing to pin '%d' at node '%s'\n",pin,gpio);
        return(-1);
    }

    return(0);
}

int main(int argc, char * argv[])
{
    int pin, state, i;

    pin = 23;
    state = 1;

    if (VERBOSE) {
        printf("argc: %d\n",argc);
        for (i=0;i<argc;i++)
            printf("argv[%d]: '%s'\n",i,argv[i]);
    }

    if (argc > 1)
        pin = atoi(argv[1]);
    if (argc > 2)
        state = atoi(argv[2]);

    if (VERBOSE) {
        printf("gpio: '%s'\n",gpio);
        printf("pin: '%d'\n",pin);
        printf("state: '%d'\n",state);
    }

    if (gpio_export(pin) < 0) {
        printf("Error exporting pin '%d'\n",pin);
        exit(1);
    }

    if (gpio_write(pin,state) < 0) {
        printf("Error writing pin '%d'\n",pin);
        exit(1);
    }

//    if (gpio_unexport(pin) < 0) {
//        printf("Error unexporting pin '%d'\n",pin);
//        exit(1);
//    }

    exit(0);
}

